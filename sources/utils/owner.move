module mobility_protocol::owner;

// ===== One time witness structs =====

/// Serves as the one time witness to create the owner capability during
/// module initialization.
public struct OWNER has drop {}

// ===== Global storage structs =====

/// Any user with the owner capability can manage relayers, and create and update
/// lending pool parameters. Owner capability can be freely transferred from one
/// address to another. Does not have any data fields except the object UID.
public struct OwnerCap has key, store {
    id: object::UID,
}

// ===== Private functions =====

/// Initializes the module by creating the owner capability object and transferring
/// it to the caller.
///
/// Args:
///
/// _otw:   The one time witness generated by Move during initialization.
/// ctx:    The transaction context.
fun init(_otw: OWNER, ctx: &mut TxContext) {
    let owner_cap = OwnerCap { id: object::new(ctx) };

    transfer::public_transfer(owner_cap, ctx.sender());
}

// ===== Test only =====

#[test_only]
public fun init_for_testing(ctx: &mut TxContext) {
    let otw = OWNER {};

    init(otw, ctx);
}
